#!/usr/bin/env node
var reverseMustache = require('reverse-mustache');
var fs = require('fs');
// var util = require('util');
var path = require('path');
var stringify = require('json-stable-stringify');

var bankingSwiftMessages = require('../lib/banking-swift-messages.js');
var mongoHandler = require('../lib/mongo-handler.js');

//--------------------------
// https://github.com/janl/mustache.js/blob/master/bin/mustache#L130
function usage() {
    throw new Error("Error: Usage ... swift2json -f path/to/filename.txt [-m localhost]");
}

function getFilename() {
  var fIndex = process.argv.indexOf('-f');
  if(fIndex == -1) usage();
  return process.argv.splice(fIndex, 2)[1];
}

function getCacheToMongo() {
  var mIndex = process.argv.indexOf('-m');
  if(mIndex == -1) return false;
  return process.argv.splice(mIndex, 2)[1];
}

//--------------------------
var filename = getFilename();
var mongoHost = getCacheToMongo();

// 255 is selected for xargs in the dockerfile
// http://stackoverflow.com/a/26485626/4126114
function mongoErr(err) {
  console.error(err.stack);
  process.exit(255);
}

function handleFile() {
  try {
    var json = bankingSwiftMessages.parse(filename);
  } catch(err) {
      console.error(err);
      // exit with 1, not 255, so that a non-MT103 file does not block
      // the xargs call in the dockerfile
      process.exit(1);
  }

  if(mongoHost) {
    mongoHandler.upsert(filename,json).then(
      function() {
        console.log("Saved to mongo the parsed json of "+filename);
      },
      mongoErr
    );
    return;
  }

  // output sorted keys
  // https://www.npmjs.com/package/json-stable-stringify
  // THIS IS NOT SORTED: console.log(util.inspect(parsed,false,null));
  console.log(stringify(json,{space:4}));
}

if(mongoHost) {
  mongoHandler.setHost(mongoHost);

  mongoHandler.get(filename).then(function(doc) {
    if(doc.length==1) {
      console.error("Already found in mongo. Skipping: "+filename);
      process.exit(2);
    }
    handleFile();
  }, mongoErr);
  return;
}

handleFile();
